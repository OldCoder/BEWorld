<?xml version="1.0" encoding="UTF-8"?>
<section title="Tcl API Reference">
	<desc>Welcome to the quick reference guide for the Brick Engine, v5.3.  This document covers the Tcl API.</desc>
	<section title="Basic Engine Operation">
		<section title="Starting and stopping the Brick Engine">
      <desc>The engine automatically starts when you either load the module or start the **br** program, so you don't need to do anything special to get started.</desc>
		</section>
		<section title="Graphics">
			<desc>The graphics display may be started and stopped at any time (e.g. to change from windowed to full-screen mode, or to change the display resolution), without interfering with the rest of the engine.  These are the routines to activate and deactivate the graphics display.</desc>
			<function>
				<proto>br::graphics modes</proto>
				<desc>Returns a list of the available graphics modes.</desc>
			</function>
			<function>
				<proto>br::graphics open **sdl** //width// //height// //fullscreen//
br::graphics open **accel** //width// //height// //fullscreen// //zoom-factor//</proto>
				<desc>Opens the graphics display.  The **sdl** mode is always available, and **accel** will be available if the Brick engine has been built with OpenGL-based acceleration.  The //width// and //height// values determine the size of the output display.  The **fullscreen** flag is a boolean value to indicate whether or not to use the full-screen mode.  The **accel** mode takes an optional pixel multiplier for zoomed display; note that this does not change the display resolution, only its size.  //There is a Brick Engine-internal maximum width and height, set at compile time and defaulting to 640x480.//</desc>
			</function>
			<function>
				<proto>br::graphics close</proto>
				<desc>Closes the active graphics display.</desc>
			</function>
			<function>
				<proto>br::graphics info</proto>
				<desc>Returns a list of information about the current display mode, consisting of the active display mode, width, and height. </desc>
			</function>
			<function>
				<proto>br::graphics window-title //title//</proto>
				<desc>Sets the title of the display window.</desc>
			</function>
		</section>
		<section title="Audio">
			<desc>Audio output may be activated or deactivated at any time.  These routines let you do that.</desc>
			<function>
				<proto>br::audio modes</proto>
				<desc>Returns a list of the available audio modes.</desc>
			</function>
			<function>
				<proto>br::audio open **speaker**</proto>
				<desc>Opens the audio output.  If the mode is **speaker**, the audio is sent to the speakers.  No other modes are presently available.</desc>
			</function>
			<function>
				<proto>br::audio close</proto>
				<desc>Closes the active audio output.</desc>
			</function>
		</section>
		<section title="Input">
			<desc>These are functions used to configure and read user input from keyboard, joystick, and mouse.  The joystick is the primary type of input device recognized by the Brick Engine, and the engine supports up to eight joysticks at a time.  You don't, of course, need any actual joysticks to play, because the engine will map all keyboard input onto one of eight "virtual joysticks":  each keypress is turned into an axis, hat, or button motion on one of the eight joysticks, and this keyboard-input mapping can be altered at any time.  If you've got actual hardware joysticks plugged in, the inputs provided by these joysticks (axes, hats, and buttons) can be read directly.</desc>
			<function>
				<proto>br::io fetch //input-number//</proto>
				<desc>Returns a list containing the current status for the requested input device:

| | { | { axes .. } | { hats .. } | { buttons .. } | space | tab | sel | pause | esc | } |
| Index | | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | |

There are eight inputs from which movement and actions can be requested, numbered 0 through 7.  Keys can be assigned to any action (axis, hat, or button) on any input.  If joysticks are plugged in, they are assigned to the inputs starting at **0**.

Axes have a range from -127 to 127.  Key presses will set the axis to the ends of this range, while an analog joystick input may return any value within this range.  Up to eight axes are read, either from joystick or from the assigned keys.

Usually, the first two axes will represent horizontal and vertical motion, either from the keyboard or the joystick.  Joysticks with more than one analog stick will use additional axes to represent the movement on the additional sticks.  By default, the arrow keys are mapped onto axes 0 and 1 on input 0.

Hats represent the four-way directional inputs present on some joysticks.  Hat values range from -1 to 1 and are returned as pairs of horizontal and vertical results.  Note that a joypad-style controller with just one directional input probably returns its results as a pair of axes rather than a hat.  By default, the keys **wasd** are mapped onto hat 0 of input 0.

Button presses return either 0 or 1.  By default, the keys **left ctrl**, **left alt**, **z**, and **x** are assigned to button presses 0 through 3 on input 0.

There are eight axes, four hats, and twenty buttons available on each input.

The keys **space**, **tab**, **enter**/**return** (as **select**), **pause**, and **escape** are always included in the results.</desc>
			</function>
			<function>
				<proto>br::io mouse //input-number//</proto>
				<desc>Returns the motion of the mouse along with button clicks in a list:

| | { | x | y | { buttons .. } | } |
| Index | | 0 | 1 | 2 | |

There will rarely be more than one mouse, so in most situations the only useful input number will be **0**.</desc>
			</function>
			<function>
				<proto>br::io grab //mode//</proto>
				<desc>Enables or disables the input grab.  If the window manager is interfering with the game controls, it can be useful to enable the input grab, but be warned that this makes it almost impossible to recover from a game stuck in an infinite loop.</desc>
			</function>
			<function>
				<proto>br::io has-quit</proto>
				<desc>Returns true if the user has pressed the application's close or quit button.</desc>
			</function>
			<function>
				<proto>br::io wait //delay//</proto>
				<desc>Waits until all input buffers are cleared, and then waits until any activity on any of the inputs is received.  If the application-quit button is pressed, this immediately returns -1.  The **delay** value indicates how many times each second the inputs will be checked for activity, so that the processor use can be kept low.</desc>
			</function>
			<function>
				<proto>br::io assign //input-number// **axis** //index// //direction// //key-id//
br::io assign //input-number// **hat** //index// //direction// //key-id//
br::io assign //input-number// **button** //index// //key-id//</proto>
				<desc>Assigns the key-id to the given action on the given input.  Each axis has two directions, **left** or **right**, to which a keypress can be assigned.  Hats can have a keypress assigned to any of the four directions, **up**, **right**, **down**, or **left**.</desc>
			</function>
			<function>
				<proto>br::io read-key</proto>
				<desc>Halts until a single keypress can be read, and a keycode returned.  //This is not useful for general-purpose input, but is intended only to let the programmer determine keycodes interactively, for use with **br::io assign**.//</desc>
			</function>
		</section>
	</section>
	<section title="The Graphics Subsystem">
    <desc>There are two parts of the Brick Engine graphics subsystem that deal with system-wide graphics configuration:  render settings and font handling.  Everything else (i.e. the sprites, strings, and tile-based maps) is addressed later on.</desc>
		<section title="Rendering">
			<desc>These are the routines used to set system-wide rendering options.</desc>
			<function>
				<proto>br::render bg-fill //mode//</proto>
				<desc>Enable or disable the solid-color background fill.</desc>
			</function>
			<function>
				<proto>br::render bg-color //r// //g// //b//</proto>
				<desc>Sets the background fill color to the value given by r, g, b, which have a range from 0-255.</desc>
			</function>
			<function>
				<proto>br::render set-overdraw //width// //height//</proto>
				<desc>Sets the amount of overdraw applied to the internal render canvas.  This does not affect the displayed canvas size.  Some sprite frame types (e.g. the pixel-repositioning frame) may depend on graphics data being drawn outside the screen borders for proper composition of the display, and the overdraw instructs the renderer to generate this extra data.</desc>
			</function>
			<function>
				<proto>br::render display</proto>
				<desc>Renders the current frame.</desc>
			</function>
			<function>
				<proto>br::render to-disk //filename//</proto>
				<desc>Dumps the current frame in RAW format to the named file.</desc>
			</function>
		</section>
		<section title="Fonts">
			<desc>The Brick Engine has a very simple and lightweight font renderer built in.  Fonts are loaded into the engine as bitmaps, and characters are fixed-width.  One font, named **default**, is built into the Brick Engine, and additional fonts can be loaded at any time.</desc>
			<function>
				<proto>br::font add //font-name// //char-width// //char-height// //rgb-data// (//r// //g// //b//)</proto>
				<desc>Adds a new font named **name**.  The **rgb-data** is a byte array containing pixel data for 128 characters arranged in a row, each character having the dimensions given in **w** and **h**.  If optional color components are given, they will be used as a color key.</desc>
			</function>
			<function>
				<proto>br::font info //font-name//</proto>
				<desc>Returns a list containing the character width and height for the given font.</desc>
			</function>
			<function>
				<proto>br::font from-disk //font-name// //filename// (//r// //g// //b//)</proto>
				<desc>Adds a new font named **name** from the compressed image file named **file**.  If optional color components are given, they will be used as a color key.  The font image is assumed to be 128 characters wide.  //This routine is only available if the brick engine has been built with SDL_image support.//</desc>
			</function>
			<function>
				<proto>br::font from-buffer //font-name// //buffer// (//r// //g// //b//)</proto>
				<desc>Adds a new font named **name** from the **data** buffer which contain a compressed image file.  If optional color components are given, they will be used as a color key.  The font image is assumed to be 128 characters wide.  //This routine is only available if the brick engine has been built with SDL_image support.//</desc>
			</function>
		</section>
	</section>
	<section title="The Audio Subsystem">
	  <desc>Every game needs sound!  The Brick Engine provides functionality to handle both song and sound playback with ease.</desc>
		<section title="Sound playback">
			<desc>These routines let you load sounds from different sources (from a known sound file format stored on disk or in a memory buffer, or as raw sound data), play them as needed, and stop them or adjust the sound volume/panning in mid-play.</desc>
			<function>
				<proto>br::sound load-file //filename//</proto>
				<desc>Loads a sound from a file on disk and returns the new sound ID.  The list of supported file formats can be found in the documentation for [[http://www.libsdl.org/projects/SDL_mixer/|SDL_mixer]].</desc>
			</function>
			<function>
				<proto>br::sound load-buffer //data//</proto>
				<desc>Loads a sound from the **data** buffer and returns the new sound ID.  The list of supported file formats can be found in the documentation for [[http://www.libsdl.org/projects/SDL_mixer/|SDL_mixer]].</desc>
			</function>
			<function>
				<proto>br::sound load-raw //raw-sound-data//</proto>
				<desc>Loads a buffer of raw sound data into the engine and returns a sound ID.  The data must match the compile-time sound format.  By default, the sound format is 8-bit unsigned data.</desc>
			</function>
			<function>
				<proto>br::sound play //sound-id// (//volume//)</proto>
				<desc>Plays the given sound.  The volume is optional and may range from 0 to 128.  This returns the ID of the audio channel that is playing the sound, so that the sound can be stopped or have its volume or panning adjusted.</desc>
			</function>
			<function>
				<proto>br::sound halt //channel-id//</proto>
				<desc>Stops the sound playing on the given channel.  If the channel is -1, this halts all sounds.</desc>
			</function>
			<function>
				<proto>br::sound adj-vol //channel-id// //volume//</proto>
				<desc>Sets the volume of the sound playing on the given channel ID.  The volume may range from 0 to 128.  If the channel ID is -1, sets the volume for all currently-playing sounds.</desc>
			</function>
			<function>
				<proto>br::sound adj-pan //channel-id// //panning//</proto>
				<desc>Sets the panning of the sound playing on the given channel ID.  The panning value ranges from 0 (left speaker only) to 254 (right speaker only), and is balanced at 127.  If the channel ID is -1, sets the panning for all currently-playing sounds.</desc>
			</function>
		</section>
		<section title="Song playback">
			<desc>The song playback routines will let you start, stop, and otherwise control the background music for your game.  //Note that because the Brick Engine relies on  [[http://www.libsdl.org/projects/SDL_mixer/|SDL_mixer]] for its music playback support, so the list of supported file formats depends on how SDL_Mixer has built for your system.//</desc>
			<function>
				<proto>br::song play-file //filename// (//fade-in-delay//)</proto>
				<desc>Loads and plays the named song from disk, with an optional fade-in delay given in milliseconds.</desc>
			</function>
			<function>
				<proto>br::song play-buffer //song-data// (//fade-in-delay//)</proto>
				<desc>Loads and plays the song contained in the given memory buffer, with a fade-in delay given in milliseconds.</desc>
			</function>
			<function>
				<proto>br::song pause</proto>
				<desc>Pauses the currently-playing song.</desc>
			</function>
			<function>
				<proto>br::song resume</proto>
				<desc>Resumes the currently-paused song.</desc>
			</function>
			<function>
				<proto>br::song halt (//fade-out-delay//)</proto>
				<desc>Stops the currently-playing song with fade-out delay given in milliseconds.</desc>
			</function>
			<function>
				<proto>br::song set-position //position//</proto>
				<desc>Sets the position of the currently-playing song.</desc>
			</function>
			<function>
				<proto>br::song adj-vol //volume//</proto>
				<desc>Sets the music playback volume.  The volume can range from 0 to 128.</desc>
			</function>
		</section>
	</section>
	<section title="Items and Lists">
	  <desc>These are the bread-and-butter routines in the Brick Engine, the API calls you'll use again and again in developing your games, so it's worth it to familiarize yourself with these.</desc>
		<section title="Lists">
			<desc>Lists are everywhere in computing, and the Brick Engine is no different.  The list implementation built into the engine is a pretty simple doubly-linked list, and you'll most often use it in two places:  adding sprites and strings to the sprite- and string- display lists, and getting back lists of sprites from the introspection routines.  (You may also find some more sophisticated uses for the Brick Engine lists, though, e.g. setting up some intricate collision-detection schemes where you'll test certain groups of enemy sprites against certain player projectiles.)  These routines are what you'll use to create and manipulate Brick Engine lists.</desc>
			<function>
				<proto>br::list create</proto>
				<desc>Creates a new list and returns its id.</desc>
			</function>
			<function>
				<proto>br::list empty //list-id//</proto>
				<desc>Empties the given list.  Note that this does not delete any of the items in the list.</desc>
			</function>
			<function>
				<proto>br::list delete //list-id//</proto>
				<desc>Deletes the given list.  Note that this does not delete any of the items in the list.</desc>
			</function>
			<function>
				<proto>br::list add //list-id// //item-id//</proto>
				<desc>Adds the given item to the end of the list.</desc>
			</function>
			<function>
				<proto>br::list prepend //list-id// //item-id//</proto>
				<desc>Adds the given item to the start of the list.</desc>
			</function>
			<function>
				<proto>br::list shift //list-id//</proto>
				<desc>Removes the first item from the head of the list and returns it.</desc>
			</function>
			<function>
				<proto>br::list pop //list-id//</proto>
				<desc>Removes the last item from the list and returns it.</desc>
			</function>
			<function>
				<proto>br::list remove //list-id// //item-id//
br::list remove //list-id// //item-id// **head**
br::list remove //list-id// //item-id// **tail**
br::list remove //list-id// //item-id// **all**</proto>
				<desc>Removes the given item from the list.  If the optional third argument is **head**, then the first matching item is removed.  If the optional third argument is **tail**, then the last matching item is removed.  If no third argument is given, or the third argument is **all**, all matching items are removed.</desc>
			</function>
			<function>
				<proto>br::list length //list-id//</proto>
				<desc>Returns the number of items in the given list.</desc>
			</function>
			<function>
				<proto>br::list find //list-id// //item-id//</proto>
				<desc>Determines whether the given item is in the list.</desc>
			</function>
		</section>
		<section title="Frames">
			<desc>A frame is a container for any sort of graphics data in the Brick Engine.  Whether you are working with simple pixel data, color keyed data (i.e. one color treated as transparent), or one of the various visual effects (e.g. convolution kernel, desaturation, and so on), the data is always stored in a frame.  Some of the sprite and tile routines, such as sprite_add_frame_data(), handle the process of creating and loading the frame for you, but others, such as sprite_add_subframe(), require that you create and prepare the frame before passing it to the routine.

Frames can be sliced into subframes (good for cutting up sprite sheets), and it's also possible to convert RGB frames into almost any other frame type, e.g. to create a desaturated version of a sprite, for use in some effect.

Last, if you've built the Brick Engine with the SDL_Image dependency, you can load and unpack a variety of image types directly into frames, either from disk or from a memory buffer.</desc>
			<function>
				<proto>br::frame create **none** //w// //h//
br::frame create **rgb** //width// //height// //rgb-data// (//r// //g// //b//)
br::frame create **br** //width// //height// //rgb-adj-data//
br::frame create **ct** //width// //height// //adj-data//
br::frame create **hl** //width// //height// //rgb-adj-data//
br::frame create **sl** //width// //height// //rgb-adj-data//
br::frame create **sat** //width// //height// //adj-data//
br::frame create **displ** //width// //height// //displacement-data//
br::frame create **convo** //width// //height// //pixel-mask// //{ kernel-width kernel-height { kernel-data .. } divisor offset }//
br::frame create **lut** //width// //height// //pixel-mask// { lookup-table-data .. }</proto>
				<desc>Creates a new graphics frame using the given frame data.  The **mode** determines the frame type:

  * **none** - takes no display data and produces no output.  This isn't very useful, except for situations where some unusual collision detection is needed.
  * **rgb** - the data is three-bytes-per-pixel rgb data and an optional chroma key can be given as three additional arguments, **r g b**.  The data is drawn directly onto the render canvas.
  * **br** - the data is unsigned char data in rgb format.  A pixel component value of 64 is neutral and doesn't alter image brightness.  Values less than 64 darken the image, and values greater than 64 brighten the image.
  * **ct** - the data is unsigned char data, one char per pixel.  A pixel component value of 64 is neutral and leaves the image data unaltered.  Values less than 64 decrease contrast to the neutral grey, and values greater than 64 increase the contrast of the image data.
  * **hl** - the data is unsigned char data in rgb format.  A pixel component value of 128 is neutral and doesn't alter image lightness.  Values less than 128 darken the image toward black, and values greater than 128 lighten the image toward white.  This is also known as a "hard light" filter.
  * **sl** - the data is unsigned char data in rgb format.  a pixel component value of 128 is neutral and doesn't alter image lightness.  Values less than 128 lighten the image, and values greater than 128 darken the image.  This is also known as a "soft light" filter.
  * **sat** - the saturation of the underlying image is adjusted by the value in the unsigned char adjustment data.  An adjustment value of 128 leaves the image unchanged.  A value of 64 desaturates the image, and values between 64 and 128 give varying degrees of desaturation.  Values less than 64 invert the hue of the image data.  Values greater than 128 increase the saturation.
  * **displ** - the displacement data is an array of 16-bit (big-endian) x/y coordinate pairs.  Each coordinate pair represents an offset from the specific pixel in the frame to a location in the underlying image data, from which to retrieve the given pixel.
  * **convo** - the convolution kernel as specified is run on the underlying image data, for each non-zero pixel in the pixel mask.
  * **lut** - then each pixel in the underlying image data is replaced according to the the pixel value in the lookup table.  The lookup table is a list containing 768 entries ranging from 0 to 255.  This list will be internally divided into three sets of 256 bytes, each one constituting a lookup table (red first, then green, then blue), where the pixel component in the source image is used as the index into the lookup table for the resulting pixel value.</desc>
			</function>
			<function>
				<proto>br::frame info //frame-id//</proto>
				<desc>Returns the frame dimensions and type.</desc>
			</function>
			<function>
				<proto>br::frame copy //frame-id//</proto>
				<desc>Makes a copy of the given frame.</desc>
			</function>
			<function>
				<proto>br::frame delete //frame-id//</proto>
				<desc>Deletes the given frame.</desc>
			</function>
			<function>
				<proto>br::frame mask //frame-id// //mask-data//</proto>
				<desc>Sets the pixel mask for the given frame.  The mask is specified as an array of data, one byte per pixel.  The dimensions of the mask must match the tile dimensions.  Any non-zero values mark the pixel as collidable.</desc>
			</function>
			<function>
				<proto>br::frame mask-from //frame-id// //source-frame-id//</proto>
				<desc>Sets the pixel mask for the given frame one of two ways, depending on the source frame.  If the source frame has a color key set, then the pixel mask is generated by non-transparent pixels.  If the source frame has no transparency set, then each pixel is desaturated and any pixels darker than middle gray are treated as solid.  This routine only accepts RGB-type frames.</desc>
			</function>
			<function>
				<proto>br::frame slice //frame-id// //x// //y// //w// //h//</proto>
				<desc>Copies out a section out of the given RGB frame and returns it as a new frame.</desc>
			</function>
			<function>
				<proto>br::frame convert //frame-id// **none**
br::frame convert //frame-id// **convo** //{ kernel-width kernel-height { kernel-data .. } divisor offset }//
br::frame convert //frame-id// **br**
br::frame convert //frame-id// **ct**
br::frame convert //frame-id// **hl**
br::frame convert //frame-id// **sl**
br::frame convert //frame-id// **sat**
br::frame convert //frame-id// **lut** { lookup-table-data .. }</proto>
				<desc>Converts an RGB frame to almost any other frame type.  This routine modifies the frame in-place, so you should make a copy if you plan to use the original again.</desc>
			</function>
			<function>
				<proto>br::frame from-disk //filename// (//r// //g// //b//)</proto>
				<desc>Loads and decompresses the given image file into an RGB frame.  //This routine is only available if the brick engine has been built with SDL_image support.//</desc>
			</function>
			<function>
				<proto>br::frame from-buffer //buffer// (//r// //g// //b//)</proto>
				<desc>Loads and decompresses an RGB frame from an image file stored in the given data buffer.  //This routine is only available if the brick engine has been built with SDL_image support.//</desc>
			</function>
		</section>
		<section title="Layers">
			<desc>Layers are the basic building block of graphics programming with the Brick Engine.  A layer consists of a sprite list, a tile-based map, and a string list.  Any of these items can be omitted, and if all three are omitted, the layer is ignored.  Each layer also has a camera position, which determines what part of the layer (i.e. the layer's sprites and map..more on strings in a minute) is visible.  Strings are a little different, in that they're always rendered exactly where they're placed, and do not move when the layer camera is moved.  The layers are rendered in order of creation, and they can be swapped with one another.

Each layer can also have a viewport set, which determines the region of the screen where the layer will actually be drawn.  (This allows for easy split-screen gaming, e.g. create a layer, set its viewport to the left half of the screen, then copy it into a new layer and set that layer's viewport to the right side of the screen.  Each layer's camera can then be focused on different players.)

Layers have two attributes which are worth mentioning:  visibility and sorting.  Layer visibility doesn't really need further explanation.  The visibility attribute can be set at any time.  Sorting, however, is more complicated.  Some games may require that sprites are rendered in a certain order, e.g. a sprite that passes in front of another and then behind it, and sorting is a way to achieve that.  When layer sorting is enabled, all sprites in that layer are sorted by their z-hint attribute before rendering, and are then rendered in order.</desc>
			<function>
				<proto>br::layer add</proto>
				<desc>Adds a new layer and returns its ID.  When a layer is added, a sprite list, map, and string list are automatically created.</desc>
			</function>
			<function>
				<proto>br::layer swap //first-layer-id// //second-layer-id//</proto>
				<desc>Swaps the first layer with the second.</desc>
			</function>
			<function>
				<proto>br::layer remove //layer-id//</proto>
				<desc>Removes the specified layer.</desc>
			</function>
			<function>
				<proto>br::layer copy //layer-id//</proto>
				<desc>Makes a copy of the specified layer, assigning its properties (sprite list, map, etc) to the new layer.</desc>
			</function>
			<function>
				<proto>br::layer sprite-list //layer-id// (//list-id//)</proto>
				<desc>Gets or sets the sprite list for the given layer.</desc>
			</function>
			<function>
				<proto>br::layer map (//map-id//)</proto>
				<desc>Gets or sets the map for the given layer.</desc>
			</function>
			<function>
				<proto>br::layer string-list //layer-id// (//list-id//)</proto>
				<desc>Gets or sets the string list for the given layer.</desc>
			</function>
			<function>
				<proto>br::layer visible //layer-id// (//boolean//)</proto>
				<desc>Gets or sets visibility on the given layer.</desc>
			</function>
			<function>
				<proto>br::layer sorted //layer-id// (//boolean//)</proto>
				<desc>Gets or sets z-hint sorting on the given layer.</desc>
			</function>
			<function>
				<proto>br::layer view //layer-id// (//x1// //y1// //x2// //y2//)</proto>
				<desc>Gets or sets the layer's viewport.</desc>
			</function>
			<function>
				<proto>br::layer camera //layer-id// //x// //y//</proto>
				<desc>Moves the layer camera to the given position.</desc>
			</function>
		</section>
		<section title="Maps">
			<desc>The tile-based map is an important part of much of 2D game programming, and the Brick Engine has some useful map functionality built in.  Every display layer gets one map, and it's always optional whether or not to use the map for any given layer.

A map consists of two things:  a set of tiles, and an array of map data.  So, to get started with the tile-based maps, you'll first create one or more tiles using the tile-handling commands.  You'll then add them to the map's tile index, a fixed-length array of tiles (there's a compile-time limit that determines the size of this array, by default limited to 4096 tiles), and set the tile size as well as the overall map dimensions.  Last, you'll set the map data, either one element at a time or all at once.  Each entry in the map data array is a number that corresponds to the tile index containing the tile you want to appear at that position on the map.

So, if you have a map that with a width of 3 and a height of 2, the map data array will consist of six numbers.  The first three numbers indicate which tiles will show on the first row of the map, and the second three numbers indicate which tiles show on the second row of the map.

If your map data has tile indices that haven't had any tiles set, then nothing will be rendered (e.g. a hole will appear, and whatever was underneath will be visible) at that point of the map.</desc>
			<function>
				<proto>br::map create</proto>
				<desc>Creates a new map and returns its ID.</desc>
			</function>
			<function>
				<proto>br::map empty //map-id//</proto>
				<desc>Removes map data and all tile associates.  This does not, however, free the tiles themselves.</desc>
			</function>
			<function>
				<proto>br::map delete //map-id//</proto>
				<desc>Deletes a map and frees all of its associated resources.</desc>
			</function>
			<function>
				<proto>br::map size //map-id// (//width// //height//)</proto>
				<desc>Gets or sets the size of the given map.</desc>
			</function>
			<function>
				<proto>br::map tile-size //map-id// (//width// //height//)</proto>
				<desc>Gets or sets the tile size for use on a given map.  All tiles subsequently loaded should match these dimensions.  Tiles larger than this size will be clipped, and tiles smaller than this size will have display aligned to the upper-left corner of the tile cell.</desc>
			</function>
			<function>
				<proto>br::map tile //map-id// //index// (//tile-id//)</proto>
				<desc>Gets or sets the given tile index.</desc>
			</function>
			<function>
				<proto>br::map set-data //map-id// //map-data//</proto>
				<desc>Loads the data array into the given map.  The map array is an array of 16-bit (big endian) words, each word containing the index of the tile to display at that position on the map.</desc>
			</function>
			<function>
				<proto>br::map set-single //map-id// //x// //y// //index//</proto>
				<desc>Sets a single element in the map data to the given tile.</desc>
			</function>
			<function>
				<proto>br::map animate-tiles //map-id// //index//</proto>
				<desc>Animates all map tiles.</desc>
			</function>
			<function>
				<proto>br::map reset-tiles //map-id//</proto>
				<desc>Resets all animated tiles to their initial state.</desc>
			</function>
		</section>
		<section title="Tiles">
			<desc>These routines allow you to create the tiles (and set the properties of same) that you can then load into your maps.</desc>
			<function>
				<proto>br::tile create</proto>
				<desc>Creates a new tile and returns its ID.</desc>
			</function>
			<function>
				<proto>br::tile delete //tile-id//</proto>
				<desc>Deletes the given tile and frees its associated image data.</desc>
			</function>
			<function>
				<proto>br::tile anim-type //tile-id// (//animation-type//)</proto>
				<desc>Gets or sets the animation type for the given tile.  The animation type must be one of **still**, **fwd**, **rev**, or **pp** (ping-pong).</desc>
			</function>
			<function>
				<proto>br::tile collides //tile-id// (//collision-mode//)</proto>
				<desc>Gets or sets the collision mode for the given tile.  The collision mode can be **off** to disable collision detection for the tile, **box** to enable bounding-box collision detection, or **pixel** to enable pixel-accurate collision detection.</desc>
			</function>
			<function>
				<proto>br::tile add-frame //tile-id// //frame-id//</proto>
				<desc>Loads the frame into the tile.</desc>
			</function>
			<function>
				<proto>br::tile add-frame-data //tile-id// **none** //width// //height//
br::tile add-frame-data //tile-id// **rgb** //width// //height// //rgb-data// (//r// //g// //b//)
br::tile add-frame-data //tile-id// **br** //width// //height// //rgb-adj-data//
br::tile add-frame-data //tile-id// **ct** //width// //height// //adj-data//
br::tile add-frame-data //tile-id// **hl** //width// //height// //rgb-adj-data//
br::tile add-frame-data //tile-id// **sl** //width// //height// //rgb-adj-data//
br::tile add-frame-data //tile-id// **sat** //width// //height// //adj-data//
br::tile add-frame-data //tile-id// **displ** //width// //height// //displacement-data//
br::tile add-frame-data //tile-id// **convo** //width// //height// //pixel-mask// //{ kernel-width kernel-height { kernel-data .. } divisor offset }//
br::tile add-frame-data //tile-id// **lut** //width// //height// //pixel-mask// { lookup-table-data .. }</proto>
				<desc>Loads the given image data into the tile.  Please see the documentation for **br::frame create** has a detailed description of the options.</desc>
			</function>
			<function>
				<proto>br::tile pixel-mask //tile-id// //frame-id// //mask-data//</proto>
				<desc>Sets a pixel-accurate collision mask for the specified frame of the tile.  The mask is specified as an array of data, one byte per pixel.  The dimensions of the mask must match the tile dimensions.  Any non-zero value indicates a collidable pixel.</desc>
			</function>
			<function>
				<proto>br::tile pixel-mask //tile-id// //frame-id// //source-frame-id//</proto>
				<desc>Sets a pixel-accurate collision mask for the specified frame of the tile from a source frame.  If the source frame has a color key set, then the opaque pixels represent the collidable portions of the pixel mask.  If the source frame does not have a color key, then each pixel is desaturated and any pixel lighter than medium gray counts as an active pixel.</desc>
			</function>
			<function>
				<proto>br::tile animate //tile-id//</proto>
				<desc>Animates the given tile.</desc>
			</function>
			<function>
				<proto>br::tile reset //tile-id//</proto>
				<desc>Resets the given tile to its initial animation frame.</desc>
			</function>
		</section>
		<section title="Sprites">
			<desc>Sprites are movable graphical elements that comprise the basic building blocks of most games you'll make with the Brick Engine.  They're similar to the idea of hardware sprites that you'll find in consoles and old computers, but with some very useful improvements.

Each sprite can have an unlimited number of graphics frames added to it for animation, and each frame can have subframes that are rendered in series to aid in composition of sprites and effects.  The effects are the other unique thing about Brick Engine sprites.  A given sprite frame (or subframe) isn't just a block of RGB data, but can be one of a variety of color-manipulation effects, such as brightness or saturation/desaturation effects, or pixel-manipulation effects, such as user-defined convolution kernels.  These effects allow for a wide variety of engaging visuals, like shadows, real-time reflective mirrors, rippling water effects, heat-blurring of rocket jets, and so on.

Sprites can also have two kinds of collision-detection enabled, bounding box collision detection (very fast) and pixel-accurate collision detection (not as fast, but as accurate as you specify).

Brick Engine sprites offer two more seldom-used features that come in handy for specific situations, z-hinting and motion control programs.  Z-hinting allows sprites to be drawn in a certain order, e.g. if a sprite passes alternately in front of and behind a level object.  Z-hinting must enabled at for a given layer, and the z-hint values are otherwise ignored.  Motion control programs are little scripts attached to sprites that allow for some autonomous behavior, and have their own section in this document, which you ought to consult to learn more.</desc>
			<function>
				<proto>br::sprite create</proto>
				<desc>Creates a new sprite and returns its ID.</desc>
			</function>
			<function>
				<proto>br::sprite copy //sprite-id//</proto>
				<desc>Creates a duplicate of the given sprite and returns the new ID.</desc>
			</function>
			<function>
				<proto>br::sprite delete //sprite-id//</proto>
				<desc>Deletes the given sprite.</desc>
			</function>
			<function>
				<proto>br::sprite frame //sprite-id// (//index//)</proto>
				<desc>Gets or sets the frame to be displayed for the given sprite.</desc>
			</function>
			<function>
				<proto>br::sprite z-hint //sprite-id// (//z-value//)</proto>
				<desc>Gets or sets the suggested render order for the given sprite.  Render order for sprites with the same zhint is undefined.  If render order is not important, this setting can be ignored.  If sprite sorting is disabled (the default) on a given layer, this setting does nothing.</desc>
			</function>
			<function>
				<proto>br::sprite collides //sprite-id// (//collision-mode//)</proto>
				<desc>Gets or sets the collision mode for the given sprite.  If setting, the collision mode must be one of:  **off** to disable collision detection for the sprite, **box** to enable bounding-box collision detection, or **pixel** to enable pixel-accurate collision detection.</desc>
			</function>
			<function>
				<proto>br::sprite bounding-box //sprite-id// //frame-id// (//x1// //y1// //x2// //y2//)</proto>
				<desc>Gets or sets the bounding box for the given frame of the sprite.</desc>
			</function>
			<function>
				<proto>br::sprite pixel-mask //sprite-id// //frame-id// //mask-data//</proto>
				<desc>Sets the pixel-accurate collision detection mask for the given frame to the given pixel mask.  The mask is specified as an array of data, one byte per pixel.  The dimensions of the mask must match the sprite dimensions.  Any non-zero value marks the pixel as collidable.</desc>
			</function>
			<function>
				<proto>br::sprite pixel-mask-from //sprite-id// //frame-id// //mask-data//</proto>
				<desc>Sets the pixel-accurate collision mask for the specified frame of the sprite.  If the source frame has a color key set, then the opaque pixels represent the collidable portions of the pixel mask.  If the source frame does not have a color key, then each pixel is desaturated and any pixel lighter than medium gray counts as an active pixel.</desc>
			</function>
			<function>
				<proto>br::sprite position //sprite-id// (//x// //y//)</proto>
				<desc>Gets or sets the sprite position.</desc>
			</function>
			<function>
				<proto>br::sprite velocity //sprite-id// (//x// //y//)</proto>
				<desc>Gets or sets the velocity of the sprite.  Note that sprite velocity is only used in the collision detection routines.</desc>
			</function>
			<function>
				<proto>br::sprite add-frame //sprite-id// //frame-id//</proto>
				<desc>Loads the frame into the sprite.</desc>
			</function>
			<function>
				<proto>br::sprite add-frame-data //sprite-id// **none** //width// //height//
br::sprite add-frame-data //sprite-id// **rgb** //width// //height// //rgb-data// (//r// //g// //b//)
br::sprite add-frame-data //sprite-id// **hl** //width// //height// //rgb-adj-data//
br::sprite add-frame-data //sprite-id// **sl** //width// //height// //rgb-adj-data//
br::sprite add-frame-data //sprite-id// **br** //width// //height// //rgb-adj-data//
br::sprite add-frame-data //sprite-id// **ct** //width// //height// //adj-data//
br::sprite add-frame-data //sprite-id// **sat** //width// //height// //adj-data//
br::sprite add-frame-data //sprite-id// **displ** //width// //height// //displacement-data//
br::sprite add-frame-data //sprite-id// **convo** //width// //height// //pixel-mask// //{ kernel-width kernel-height { kernel-data .. } divisor offset }//
br::sprite add-frame-data //sprite-id// **lut** //width// //height// //pixel-mask// { lookup-table-data .. }</proto>
				<desc>Loads one frame of image data into the given sprite.  Please see the documentation for **br::frame create** has a detailed description of the options.</desc>
			</function>
			<function>
				<proto>br::sprite add-subframe //sprite-id// //sprite-frame-id// //frame-id//</proto>
				<desc>Adds the frame to the sprite as a subframe on the given frame index.  Subframes are rendered in reverse order, i.e. the last-added subframe is rendered first.  This allows for easy compositing of sprite frames together (e.g. a shadow, a lighting effect, etc) into a single sprite.  Please note that this does not make a copy of the frame, however, so it may be necessary or desirable to make a copy of the frame before passing it into this routine.</desc>
			</function>
			<function>
				<proto>br::sprite load-program //sprite-id// //motion-control-code//</proto>
				<desc>This routine loads the given motion control program into the sprite.  Please see the section on Motion Control Programs for a detailed description of how to write these programs.</desc>
			</function>
		</section>
		<section title="Strings">
			<desc>Strings are what you'll use to display blocks of text onscreen, such as in character dialogue or as part of a heads-up display.  These are the routines used to create and manipulate strings.  After creating and configuring your text strings, you'll need to add them to a layer's string list in order for them to be displayed.  //Note that strings are positioned absolutely on the display canvas and do not move when the layer camera moves.//</desc>
			<function>
				<proto>br::string create</proto>
				<desc>Creates a new string and returns its id.</desc>
			</function>
			<function>
				<proto>br::string delete //string-id//</proto>
				<desc>Deletes the given text string.</desc>
			</function>
			<function>
				<proto>br::string font //string-id// //font-name//</proto>
				<desc>Sets the font for the given string to the so-named font.</desc>
			</function>
			<function>
				<proto>br::string position //string-id// //x// //y//</proto>
				<desc>Adjusts the position of the given string.</desc>
			</function>
			<function>
				<proto>br::string text //string-id// //text//</proto>
				<desc>Sets the given string to the given text.  Respects the ascii control characters for tab stop, new line, carriage return.</desc>
			</function>
		</section>
	</section>
	<section title="The Motion Control System">
		<section title="The Language">
			<desc>Motion control programs are very short programs, written in a custom language, that give sprites some simple autonomy, i.e. without having to run callbacks in the main game loop.  They're especially useful when the programmer is using a scripting language but still desires to animate great numbers of sprites., because they can eliminate the need to fire potentially-heavy script callbacks for sprite motion.

Motion control programs can also be used to generate simple particle systems, environmental effects, and the like.  Note that motion control programs aren't intended to be a generic replacement for sprite movement.  For more detailed information, please see the in-depth guide at the [[motion control programs]] page.

The language consists of the following instructions.  Instructions and their arguments appear one per line.  Whitespace and empty lines are ignored.

^ Reading and setting variables ^^
| set var, var/immediate | store the right-side value in the left-side named var |
| add var, var/immediate | add the right-side value to the left-side named var |
| stc var, var/immediate | stochastic alter the left-side var with a range of -(var/imm)..var/imm |
| trk var, id | copy over the left-side named var contents from another sprite |
| avg var, id | average the left-side named var contents with those of another sprite |
^ Conditional instructions ^^
| beq var, var/immediate | break (immediately exit the program) if equal |
| bne var, var/immediate | break if not equal |
| blt var, var/immediate | break if less than |
| bgt var, var/immediate | break if greater than |
| bmp id | break if there is a collision with the given map |
| bnm id | break if there is a not a collision with the given map |
| bst var/immediate | stochastic break, i.e. exit if random value between 0 and imm is zero |
^ Sprite and list manipulation ^^
| copy id | make a copy of the sprite and replace the current sprite with the copy for the remainder of the program |
| ladd id | add the sprite to the given list |
| lrem id | remove the sprite from the given list |
| del | delete the sprite |
^ Miscellaneous ^^
| xchgp ptr | exchange the sprite's motion control program with another sprite's program |
| sound id | play the sound |
| eoc | end of code |

The **var** is a named variable, one of the following:  **xpos**, **ypos**, **xvel**, **yvel**, **frame**, **tick**.  **xpos** and **ypos** refer to the sprite's position, and **xvel** and **yvel** refer to the sprite's velocity.  Immediate values are integers, and **id** values specify a list, sprite, map, or sound.  Argument order matches Intel-style assembly language syntax, i.e. instructions that set or change a variable have the destination given first (//set xpos, 4// can be read as //xpos = 4//)

Every sprite also has its own internal tick counter, and this increments every time the sprite's motion-control program is run.</desc>
		</section>
		<section title="Running motion control programs">
			<desc>These routines execute the motion control programs for a sprite or for a list of sprites.</desc>
			<function>
				<proto>br::motion single //sprite-id//</proto>
				<desc>Executes the motion control program for the given sprite.  Returns 0 on success, or an error code on failure.</desc>
			</function>
			<function>
				<proto>br::motion list //list-id//</proto>
				<desc>Executes the motion control program for every sprite in the given list.  Returns 0 on success, or an error code if any motion control program fails to execute.</desc>
			</function>
		</section>
	</section>
	<section title="Introspection and Collision Detection">
		<section title="Inspection">
			<desc>It's often the case that you'll need to have a sprite query its surroundings or check to see if anything else is nearby.  If you wanted to have a sprite avoid a patch of water, for example, you could use the introspection routines to read the nearby tiles and have the sprite govern itself accordingly.  These introspection routines allow you to do that, along with a few other methods of examining the environment.</desc>
			<function>
				<proto>br::inspect adjacent-tiles //sprite-id// //direction// //map-id//</proto>
				<desc>Returns a list of tiles in the given map adjacent to the sprite.  The direction is one of **nw**, **n**, **ne**, **e**, **se**, **s**, **sw**, **w**.</desc>
			</function>
			<function>
				<proto>br::inspect obscured-tiles //sprite-id// //map-id//</proto>
				<desc>Returns a list of tiles in the given map covered by the sprite.</desc>
			</function>
			<function>
				<proto>br::inspect line-of-sight //sprite-id// //x-offset// //y-offset// //distance// //target-id// //map-id//</proto>
				<desc>Performs a line-of-sight test to determine visibility from the originating sprite to the target sprite within the given map.  The **x-offset** and **y-offset** offsets determine the point, relative to the sprite's upper left corner, from which the visibility test is performed.  These offsets can be negative, performing the visibility test from a point outside the originating sprite's frame.  The **distance** value is the maximum range for the test.

The originating sprite does not need to have collision detection enabled, but the target sprite must have collision detection enabled.  If the target sprite has bounding-box collision enabled, the four corners of the bounding box are checked for visibility from the originating sprite.  If the target sprite has pixel-accurate collision enabled, the visibility test is performed on the four corners of the pixel mask's bounding edges.</desc>
			</function>
			<function>
				<proto>br::inspect in-frame //list-id// //x1// //y1// //x2// //y2//</proto>
				<desc>Returns a list of every sprite in the list that falls within the given rectangle.</desc>
			</function>
			<function>
				<proto>br::inspect near-point //list-id// //x// //y// //dist//</proto>
				<desc>Returns a list of every sprite in the list that falls within the specified distance of the point.</desc>
			</function>
			<function>
				<proto>br::inspect layer-vis //layer-id// (//x-pad// //y-pad//)</proto>
				<desc>Returns a list of every sprite on the given layer that is currently visible.  If **x-pad** and **y-pad** values are given, sprites within this number of pixels of the window boundary are included.</desc>
			</function>
		</section>
		<section title="Collisions">
			<desc>These routines detect collisions among sprites, and between sprites and maps.</desc>
			<function>
				<proto>br::collision map //sprite-id// //map-id// //(slip)//</proto>
				<desc>Checks for collisions between the given sprite and map.  The optional slip argument indicates that, when a collision occurs, the sprite's path can be altered so many times to continue its motion around the map.  The result is a list:

| | { | mode | x-stop | y-stop | x-go | y-go | } |
| Index | | 0 | 1 | 2 | 3 | 4 | |

The **mode** will be -1 to indicate that the sprite and map were colliding before motion began, 0 to indicate that no collision has occurred, or 1 to indicate that collision occurred during motion.  The **stop** values indicate the pixel distance before the sprite hits the map, while the **go** is the distance in each direction that the sprite may travel after collision.</desc>
			</function>
			<function>
				<proto>br::collision sprites //sprite-id// //list-id//</proto>
				<desc>Tests the given sprite for collisions with all collidable members of the given sprite list and returns the results in a list of lists, arranged like so:

| | { | { mode target x-hit y-hit x-dist y-dist } | .. | } |
| Index | | 0 | 1 .. | |

For each collision, the **mode** indicates the collision status:  -1 to indicate that the sprites were colliding before motion began or 1 to indicate that collision occurred during motion.  The **hit** values show the direction in which the collision took place.  The **dist** values show how far the sprite traveled before it hit the target.</desc>
			</function>
		</section>
	</section>
	<section title="Utilities">
		<section title="Timing">
			<desc>A routine useful for setting up a basic delay loop and holding a steady framerate.</desc>
			<function>
				<proto>br::delay //fps//</proto>
				<desc>If the time between calls to **br::delay** is less than necessary (i.e. the game would otherwise run too fast) to maintain the given **fps** rate, then the routine will delay until enough time has passed.  if the game is running too slowly to maintain the requested **fps** rate, **br::delay** will return the number of frames that must be skipped to maintain speed.</desc>
			</function>
		</section>
		<section title="Scheduled events">
			<desc>The Brick Engine includes a simple event scheduler, but this is made largely unnecessary when writing Tcl-based games, and these routines aren't supported in the Tcl bindings.  I mention them only in the event that you've noticed a discrepancy among this and other Brick Engine documentation.  I'd strongly suggest using Tcl's native event-driven and threaded programming routines.</desc>
		</section>
	</section>
</section>
